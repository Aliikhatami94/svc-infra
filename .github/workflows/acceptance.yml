name: A0 Acceptance

on:
  workflow_dispatch:
  pull_request:
    branches: ["*"]

jobs:
  acceptance:
    name: Acceptance (${{ matrix.backend }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # needed for keyless signing with cosign
    strategy:
      fail-fast: false
      matrix:
        backend: [inmem, pg-redis]
    env:
      BACKEND: ${{ matrix.backend }}
      COMPOSE_PROFILES: ${{ matrix.backend == 'pg-redis' && 'pg-redis' || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show Docker Info
        run: |
          docker version
          docker compose version

      - name: Run acceptance harness
        run: make accept

      - name: Teardown stack
        if: always()
        run: make down || true

      # Supply-chain: SBOM generation and vulnerability scanning (severity gate)
      - name: Generate SBOM (CycloneDX JSON)
        uses: anchore/sbom-action@v0
        with:
          path: .
          artifact-name: svc-infra-sbom-${{ matrix.backend }}-${{ github.run_id }}-${{ github.run_attempt }}
          output-file: sbom.${{ matrix.backend }}.cdx.json
          format: cyclonedx-json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cdx-${{ matrix.backend }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: sbom.${{ matrix.backend }}.cdx.json

      - name: Set up Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'image'
          image-ref: 'python:3.12-slim'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL'
          ignore-unfixed: true
          scanners: 'vuln'
          trivyignores: '.trivyignore'
          exit-code: '1'
        continue-on-error: false

      - name: Scan redis:7-alpine with Trivy (CRITICAL gate)
        if: matrix.backend == 'pg-redis'
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'image'
          image-ref: 'redis:7-alpine'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL'
          ignore-unfixed: true
          scanners: 'vuln'
          skip-files: '/usr/local/bin/gosu'
          trivyignores: '.trivyignore'
          exit-code: '1'
        continue-on-error: false

      - name: Scan postgres:16-alpine with Trivy (CRITICAL gate)
        if: matrix.backend == 'pg-redis'
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'image'
          image-ref: 'postgres:16-alpine'
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL'
          ignore-unfixed: true
          scanners: 'vuln'
          skip-files: '/usr/local/bin/gosu'
          trivyignores: '.trivyignore'
          exit-code: '1'
        continue-on-error: false

      # Provenance: keyless sign the SBOM artifact (best-effort for v1)
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign SBOM (keyless)
        env:
          COSIGN_YES: 'true'
        run: |
          cosign version
          cosign sign-blob \
            --output-signature sbom.${{ matrix.backend }}.cdx.json.sig \
            --output-certificate sbom.${{ matrix.backend }}.cdx.json.crt \
            sbom.${{ matrix.backend }}.cdx.json

      - name: Upload SBOM signature artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-signature-${{ matrix.backend }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            sbom.${{ matrix.backend }}.cdx.json.sig
            sbom.${{ matrix.backend }}.cdx.json.crt
